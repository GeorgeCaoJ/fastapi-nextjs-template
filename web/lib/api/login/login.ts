/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Full Stack FastAPI Project
 * OpenAPI spec version: 0.1.0
 */
import type {
  BodyLoginLoginAccessToken,
  HTTPValidationError,
  Message,
  NewPassword,
  Token,
  UserPublic
} from '.././models';

import { customFetch } from '.././custom-fetch';

/**
 * OAuth2 compatible token login, get an access token for future requests
 * @summary Login Access Token
 */
export type loginLoginAccessTokenResponse200 = {
  data: Token
  status: 200
}

export type loginLoginAccessTokenResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type loginLoginAccessTokenResponseComposite = loginLoginAccessTokenResponse200 | loginLoginAccessTokenResponse422;
    
export type loginLoginAccessTokenResponse = loginLoginAccessTokenResponseComposite & {
  headers: Headers;
}

export const getLoginLoginAccessTokenUrl = () => {


  

  return `/api/v1/login/access-token`
}

export const loginLoginAccessToken = async (bodyLoginLoginAccessToken: BodyLoginLoginAccessToken, options?: RequestInit): Promise<loginLoginAccessTokenResponse> => {
    const formUrlEncoded = new URLSearchParams();
if(bodyLoginLoginAccessToken.grant_type !== undefined && bodyLoginLoginAccessToken.grant_type !== null) {
 formUrlEncoded.append(`grant_type`, bodyLoginLoginAccessToken.grant_type)
 }
formUrlEncoded.append(`username`, bodyLoginLoginAccessToken.username)
formUrlEncoded.append(`password`, bodyLoginLoginAccessToken.password)
if(bodyLoginLoginAccessToken.scope !== undefined) {
 formUrlEncoded.append(`scope`, bodyLoginLoginAccessToken.scope)
 }
if(bodyLoginLoginAccessToken.client_id !== undefined && bodyLoginLoginAccessToken.client_id !== null) {
 formUrlEncoded.append(`client_id`, bodyLoginLoginAccessToken.client_id)
 }
if(bodyLoginLoginAccessToken.client_secret !== undefined && bodyLoginLoginAccessToken.client_secret !== null) {
 formUrlEncoded.append(`client_secret`, bodyLoginLoginAccessToken.client_secret)
 }

  return customFetch<loginLoginAccessTokenResponse>(getLoginLoginAccessTokenUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded', ...options?.headers },
    body: 
      formUrlEncoded,
  }
);}


/**
 * Test access token
 * @summary Test Token
 */
export type loginTestTokenResponse200 = {
  data: UserPublic
  status: 200
}
    
export type loginTestTokenResponseComposite = loginTestTokenResponse200;
    
export type loginTestTokenResponse = loginTestTokenResponseComposite & {
  headers: Headers;
}

export const getLoginTestTokenUrl = () => {


  

  return `/api/v1/login/test-token`
}

export const loginTestToken = async ( options?: RequestInit): Promise<loginTestTokenResponse> => {
  
  return customFetch<loginTestTokenResponse>(getLoginTestTokenUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


/**
 * Password Recovery
 * @summary Recover Password
 */
export type loginRecoverPasswordResponse200 = {
  data: Message
  status: 200
}

export type loginRecoverPasswordResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type loginRecoverPasswordResponseComposite = loginRecoverPasswordResponse200 | loginRecoverPasswordResponse422;
    
export type loginRecoverPasswordResponse = loginRecoverPasswordResponseComposite & {
  headers: Headers;
}

export const getLoginRecoverPasswordUrl = (email: string,) => {


  

  return `/api/v1/password-recovery/${email}`
}

export const loginRecoverPassword = async (email: string, options?: RequestInit): Promise<loginRecoverPasswordResponse> => {
  
  return customFetch<loginRecoverPasswordResponse>(getLoginRecoverPasswordUrl(email),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}


/**
 * Reset password
 * @summary Reset Password
 */
export type loginResetPasswordResponse200 = {
  data: Message
  status: 200
}

export type loginResetPasswordResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type loginResetPasswordResponseComposite = loginResetPasswordResponse200 | loginResetPasswordResponse422;
    
export type loginResetPasswordResponse = loginResetPasswordResponseComposite & {
  headers: Headers;
}

export const getLoginResetPasswordUrl = () => {


  

  return `/api/v1/reset-password/`
}

export const loginResetPassword = async (newPassword: NewPassword, options?: RequestInit): Promise<loginResetPasswordResponse> => {
  
  return customFetch<loginResetPasswordResponse>(getLoginResetPasswordUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      newPassword,)
  }
);}


/**
 * HTML Content for Password Recovery
 * @summary Recover Password Html Content
 */
export type loginRecoverPasswordHtmlContentResponse200 = {
  data: string
  status: 200
}

export type loginRecoverPasswordHtmlContentResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type loginRecoverPasswordHtmlContentResponseComposite = loginRecoverPasswordHtmlContentResponse200 | loginRecoverPasswordHtmlContentResponse422;
    
export type loginRecoverPasswordHtmlContentResponse = loginRecoverPasswordHtmlContentResponseComposite & {
  headers: Headers;
}

export const getLoginRecoverPasswordHtmlContentUrl = (email: string,) => {


  

  return `/api/v1/password-recovery-html-content/${email}`
}

export const loginRecoverPasswordHtmlContent = async (email: string, options?: RequestInit): Promise<loginRecoverPasswordHtmlContentResponse> => {
  
  return customFetch<loginRecoverPasswordHtmlContentResponse>(getLoginRecoverPasswordHtmlContentUrl(email),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}



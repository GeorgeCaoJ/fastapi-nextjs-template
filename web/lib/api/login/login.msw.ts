/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Full Stack FastAPI Project
 * OpenAPI spec version: 0.1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  Message,
  Token,
  UserPublic
} from '.././models';


export const getLoginLoginAccessTokenResponseMock = (overrideResponse: Partial< Token > = {}): Token => ({access_token: faker.string.alpha({length: {min: 10, max: 20}}), token_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), ...overrideResponse})

export const getLoginTestTokenResponseMock = (overrideResponse: Partial< UserPublic > = {}): UserPublic => ({email: faker.internet.email(), is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_superuser: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), full_name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 255}}),null,]), undefined]), id: faker.string.uuid(), ...overrideResponse})

export const getLoginRecoverPasswordResponseMock = (overrideResponse: Partial< Message > = {}): Message => ({message: faker.string.alpha({length: {min: 10, max: 20}}), ...overrideResponse})

export const getLoginResetPasswordResponseMock = (overrideResponse: Partial< Message > = {}): Message => ({message: faker.string.alpha({length: {min: 10, max: 20}}), ...overrideResponse})

export const getLoginRecoverPasswordHtmlContentResponseMock = (): string => (faker.word.sample())


export const getLoginLoginAccessTokenMockHandler = (overrideResponse?: Token | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Token> | Token)) => {
  return http.post('*/api/v1/login/access-token', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getLoginLoginAccessTokenResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getLoginTestTokenMockHandler = (overrideResponse?: UserPublic | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UserPublic> | UserPublic)) => {
  return http.post('*/api/v1/login/test-token', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getLoginTestTokenResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getLoginRecoverPasswordMockHandler = (overrideResponse?: Message | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Message> | Message)) => {
  return http.post('*/api/v1/password-recovery/:email', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getLoginRecoverPasswordResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getLoginResetPasswordMockHandler = (overrideResponse?: Message | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Message> | Message)) => {
  return http.post('*/api/v1/reset-password/', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getLoginResetPasswordResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getLoginRecoverPasswordHtmlContentMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<string> | string)) => {
  return http.post('*/api/v1/password-recovery-html-content/:email', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getLoginRecoverPasswordHtmlContentResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getLoginMock = () => [
  getLoginLoginAccessTokenMockHandler(),
  getLoginTestTokenMockHandler(),
  getLoginRecoverPasswordMockHandler(),
  getLoginResetPasswordMockHandler(),
  getLoginRecoverPasswordHtmlContentMockHandler()
]

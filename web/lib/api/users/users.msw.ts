/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Full Stack FastAPI Project
 * OpenAPI spec version: 0.1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  Message,
  UserPublic,
  UsersPublic
} from '.././models';


export const getUsersReadUsersResponseMock = (overrideResponse: Partial< UsersPublic > = {}): UsersPublic => ({data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({email: faker.internet.email(), is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_superuser: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), full_name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 255}}),null,]), undefined]), id: faker.string.uuid()})), count: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getUsersCreateUserResponseMock = (overrideResponse: Partial< UserPublic > = {}): UserPublic => ({email: faker.internet.email(), is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_superuser: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), full_name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 255}}),null,]), undefined]), id: faker.string.uuid(), ...overrideResponse})

export const getUsersReadUserMeResponseMock = (overrideResponse: Partial< UserPublic > = {}): UserPublic => ({email: faker.internet.email(), is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_superuser: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), full_name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 255}}),null,]), undefined]), id: faker.string.uuid(), ...overrideResponse})

export const getUsersDeleteUserMeResponseMock = (overrideResponse: Partial< Message > = {}): Message => ({message: faker.string.alpha({length: {min: 10, max: 20}}), ...overrideResponse})

export const getUsersUpdateUserMeResponseMock = (overrideResponse: Partial< UserPublic > = {}): UserPublic => ({email: faker.internet.email(), is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_superuser: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), full_name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 255}}),null,]), undefined]), id: faker.string.uuid(), ...overrideResponse})

export const getUsersUpdatePasswordMeResponseMock = (overrideResponse: Partial< Message > = {}): Message => ({message: faker.string.alpha({length: {min: 10, max: 20}}), ...overrideResponse})

export const getUsersRegisterUserResponseMock = (overrideResponse: Partial< UserPublic > = {}): UserPublic => ({email: faker.internet.email(), is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_superuser: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), full_name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 255}}),null,]), undefined]), id: faker.string.uuid(), ...overrideResponse})

export const getUsersReadUserByIdResponseMock = (overrideResponse: Partial< UserPublic > = {}): UserPublic => ({email: faker.internet.email(), is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_superuser: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), full_name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 255}}),null,]), undefined]), id: faker.string.uuid(), ...overrideResponse})

export const getUsersUpdateUserResponseMock = (overrideResponse: Partial< UserPublic > = {}): UserPublic => ({email: faker.internet.email(), is_active: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_superuser: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), full_name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 255}}),null,]), undefined]), id: faker.string.uuid(), ...overrideResponse})

export const getUsersDeleteUserResponseMock = (overrideResponse: Partial< Message > = {}): Message => ({message: faker.string.alpha({length: {min: 10, max: 20}}), ...overrideResponse})


export const getUsersReadUsersMockHandler = (overrideResponse?: UsersPublic | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UsersPublic> | UsersPublic)) => {
  return http.get('*/api/v1/users/', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUsersReadUsersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersCreateUserMockHandler = (overrideResponse?: UserPublic | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UserPublic> | UserPublic)) => {
  return http.post('*/api/v1/users/', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUsersCreateUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersReadUserMeMockHandler = (overrideResponse?: UserPublic | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserPublic> | UserPublic)) => {
  return http.get('*/api/v1/users/me', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUsersReadUserMeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersDeleteUserMeMockHandler = (overrideResponse?: Message | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Message> | Message)) => {
  return http.delete('*/api/v1/users/me', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUsersDeleteUserMeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersUpdateUserMeMockHandler = (overrideResponse?: UserPublic | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<UserPublic> | UserPublic)) => {
  return http.patch('*/api/v1/users/me', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUsersUpdateUserMeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersUpdatePasswordMeMockHandler = (overrideResponse?: Message | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<Message> | Message)) => {
  return http.patch('*/api/v1/users/me/password', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUsersUpdatePasswordMeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersRegisterUserMockHandler = (overrideResponse?: UserPublic | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UserPublic> | UserPublic)) => {
  return http.post('*/api/v1/users/signup', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUsersRegisterUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersReadUserByIdMockHandler = (overrideResponse?: UserPublic | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserPublic> | UserPublic)) => {
  return http.get('*/api/v1/users/:userId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUsersReadUserByIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersUpdateUserMockHandler = (overrideResponse?: UserPublic | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<UserPublic> | UserPublic)) => {
  return http.patch('*/api/v1/users/:userId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUsersUpdateUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersDeleteUserMockHandler = (overrideResponse?: Message | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Message> | Message)) => {
  return http.delete('*/api/v1/users/:userId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUsersDeleteUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getUsersMock = () => [
  getUsersReadUsersMockHandler(),
  getUsersCreateUserMockHandler(),
  getUsersReadUserMeMockHandler(),
  getUsersDeleteUserMeMockHandler(),
  getUsersUpdateUserMeMockHandler(),
  getUsersUpdatePasswordMeMockHandler(),
  getUsersRegisterUserMockHandler(),
  getUsersReadUserByIdMockHandler(),
  getUsersUpdateUserMockHandler(),
  getUsersDeleteUserMockHandler()
]

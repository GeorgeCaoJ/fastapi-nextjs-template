/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Full Stack FastAPI Project
 * OpenAPI spec version: 0.1.0
 */
import type {
  HTTPValidationError,
  Message,
  UpdatePassword,
  UserCreate,
  UserPublic,
  UserRegister,
  UserUpdate,
  UserUpdateMe,
  UsersPublic,
  UsersReadUsersParams
} from '.././models';

import { customFetch } from '.././custom-fetch';

/**
 * Retrieve users.
 * @summary Read Users
 */
export type usersReadUsersResponse200 = {
  data: UsersPublic
  status: 200
}

export type usersReadUsersResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type usersReadUsersResponseComposite = usersReadUsersResponse200 | usersReadUsersResponse422;
    
export type usersReadUsersResponse = usersReadUsersResponseComposite & {
  headers: Headers;
}

export const getUsersReadUsersUrl = (params?: UsersReadUsersParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/users/?${stringifiedParams}` : `/api/v1/users/`
}

export const usersReadUsers = async (params?: UsersReadUsersParams, options?: RequestInit): Promise<usersReadUsersResponse> => {
  
  return customFetch<usersReadUsersResponse>(getUsersReadUsersUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Create new user.
 * @summary Create User
 */
export type usersCreateUserResponse200 = {
  data: UserPublic
  status: 200
}

export type usersCreateUserResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type usersCreateUserResponseComposite = usersCreateUserResponse200 | usersCreateUserResponse422;
    
export type usersCreateUserResponse = usersCreateUserResponseComposite & {
  headers: Headers;
}

export const getUsersCreateUserUrl = () => {


  

  return `/api/v1/users/`
}

export const usersCreateUser = async (userCreate: UserCreate, options?: RequestInit): Promise<usersCreateUserResponse> => {
  
  return customFetch<usersCreateUserResponse>(getUsersCreateUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userCreate,)
  }
);}


/**
 * Get current user.
 * @summary Read User Me
 */
export type usersReadUserMeResponse200 = {
  data: UserPublic
  status: 200
}
    
export type usersReadUserMeResponseComposite = usersReadUserMeResponse200;
    
export type usersReadUserMeResponse = usersReadUserMeResponseComposite & {
  headers: Headers;
}

export const getUsersReadUserMeUrl = () => {


  

  return `/api/v1/users/me`
}

export const usersReadUserMe = async ( options?: RequestInit): Promise<usersReadUserMeResponse> => {
  
  return customFetch<usersReadUserMeResponse>(getUsersReadUserMeUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Delete own user.
 * @summary Delete User Me
 */
export type usersDeleteUserMeResponse200 = {
  data: Message
  status: 200
}
    
export type usersDeleteUserMeResponseComposite = usersDeleteUserMeResponse200;
    
export type usersDeleteUserMeResponse = usersDeleteUserMeResponseComposite & {
  headers: Headers;
}

export const getUsersDeleteUserMeUrl = () => {


  

  return `/api/v1/users/me`
}

export const usersDeleteUserMe = async ( options?: RequestInit): Promise<usersDeleteUserMeResponse> => {
  
  return customFetch<usersDeleteUserMeResponse>(getUsersDeleteUserMeUrl(),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


/**
 * Update own user.
 * @summary Update User Me
 */
export type usersUpdateUserMeResponse200 = {
  data: UserPublic
  status: 200
}

export type usersUpdateUserMeResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type usersUpdateUserMeResponseComposite = usersUpdateUserMeResponse200 | usersUpdateUserMeResponse422;
    
export type usersUpdateUserMeResponse = usersUpdateUserMeResponseComposite & {
  headers: Headers;
}

export const getUsersUpdateUserMeUrl = () => {


  

  return `/api/v1/users/me`
}

export const usersUpdateUserMe = async (userUpdateMe: UserUpdateMe, options?: RequestInit): Promise<usersUpdateUserMeResponse> => {
  
  return customFetch<usersUpdateUserMeResponse>(getUsersUpdateUserMeUrl(),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userUpdateMe,)
  }
);}


/**
 * Update own password.
 * @summary Update Password Me
 */
export type usersUpdatePasswordMeResponse200 = {
  data: Message
  status: 200
}

export type usersUpdatePasswordMeResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type usersUpdatePasswordMeResponseComposite = usersUpdatePasswordMeResponse200 | usersUpdatePasswordMeResponse422;
    
export type usersUpdatePasswordMeResponse = usersUpdatePasswordMeResponseComposite & {
  headers: Headers;
}

export const getUsersUpdatePasswordMeUrl = () => {


  

  return `/api/v1/users/me/password`
}

export const usersUpdatePasswordMe = async (updatePassword: UpdatePassword, options?: RequestInit): Promise<usersUpdatePasswordMeResponse> => {
  
  return customFetch<usersUpdatePasswordMeResponse>(getUsersUpdatePasswordMeUrl(),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updatePassword,)
  }
);}


/**
 * Create new user without the need to be logged in.
 * @summary Register User
 */
export type usersRegisterUserResponse200 = {
  data: UserPublic
  status: 200
}

export type usersRegisterUserResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type usersRegisterUserResponseComposite = usersRegisterUserResponse200 | usersRegisterUserResponse422;
    
export type usersRegisterUserResponse = usersRegisterUserResponseComposite & {
  headers: Headers;
}

export const getUsersRegisterUserUrl = () => {


  

  return `/api/v1/users/signup`
}

export const usersRegisterUser = async (userRegister: UserRegister, options?: RequestInit): Promise<usersRegisterUserResponse> => {
  
  return customFetch<usersRegisterUserResponse>(getUsersRegisterUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userRegister,)
  }
);}


/**
 * Get a specific user by id.
 * @summary Read User By Id
 */
export type usersReadUserByIdResponse200 = {
  data: UserPublic
  status: 200
}

export type usersReadUserByIdResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type usersReadUserByIdResponseComposite = usersReadUserByIdResponse200 | usersReadUserByIdResponse422;
    
export type usersReadUserByIdResponse = usersReadUserByIdResponseComposite & {
  headers: Headers;
}

export const getUsersReadUserByIdUrl = (userId: string,) => {


  

  return `/api/v1/users/${userId}`
}

export const usersReadUserById = async (userId: string, options?: RequestInit): Promise<usersReadUserByIdResponse> => {
  
  return customFetch<usersReadUserByIdResponse>(getUsersReadUserByIdUrl(userId),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Update a user.
 * @summary Update User
 */
export type usersUpdateUserResponse200 = {
  data: UserPublic
  status: 200
}

export type usersUpdateUserResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type usersUpdateUserResponseComposite = usersUpdateUserResponse200 | usersUpdateUserResponse422;
    
export type usersUpdateUserResponse = usersUpdateUserResponseComposite & {
  headers: Headers;
}

export const getUsersUpdateUserUrl = (userId: string,) => {


  

  return `/api/v1/users/${userId}`
}

export const usersUpdateUser = async (userId: string,
    userUpdate: UserUpdate, options?: RequestInit): Promise<usersUpdateUserResponse> => {
  
  return customFetch<usersUpdateUserResponse>(getUsersUpdateUserUrl(userId),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      userUpdate,)
  }
);}


/**
 * Delete a user.
 * @summary Delete User
 */
export type usersDeleteUserResponse200 = {
  data: Message
  status: 200
}

export type usersDeleteUserResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type usersDeleteUserResponseComposite = usersDeleteUserResponse200 | usersDeleteUserResponse422;
    
export type usersDeleteUserResponse = usersDeleteUserResponseComposite & {
  headers: Headers;
}

export const getUsersDeleteUserUrl = (userId: string,) => {


  

  return `/api/v1/users/${userId}`
}

export const usersDeleteUser = async (userId: string, options?: RequestInit): Promise<usersDeleteUserResponse> => {
  
  return customFetch<usersDeleteUserResponse>(getUsersDeleteUserUrl(userId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



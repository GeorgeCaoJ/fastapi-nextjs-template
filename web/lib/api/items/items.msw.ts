/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Full Stack FastAPI Project
 * OpenAPI spec version: 0.1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  ItemPublic,
  ItemsPublic,
  Message
} from '.././models';


export const getItemsReadItemsResponseMock = (overrideResponse: Partial< ItemsPublic > = {}): ItemsPublic => ({data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({title: faker.string.alpha({length: {min: 1, max: 255}}), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 255}}),null,]), undefined]), id: faker.string.uuid(), owner_id: faker.string.uuid()})), count: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getItemsCreateItemResponseMock = (overrideResponse: Partial< ItemPublic > = {}): ItemPublic => ({title: faker.string.alpha({length: {min: 1, max: 255}}), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 255}}),null,]), undefined]), id: faker.string.uuid(), owner_id: faker.string.uuid(), ...overrideResponse})

export const getItemsReadItemResponseMock = (overrideResponse: Partial< ItemPublic > = {}): ItemPublic => ({title: faker.string.alpha({length: {min: 1, max: 255}}), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 255}}),null,]), undefined]), id: faker.string.uuid(), owner_id: faker.string.uuid(), ...overrideResponse})

export const getItemsUpdateItemResponseMock = (overrideResponse: Partial< ItemPublic > = {}): ItemPublic => ({title: faker.string.alpha({length: {min: 1, max: 255}}), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 255}}),null,]), undefined]), id: faker.string.uuid(), owner_id: faker.string.uuid(), ...overrideResponse})

export const getItemsDeleteItemResponseMock = (overrideResponse: Partial< Message > = {}): Message => ({message: faker.string.alpha({length: {min: 10, max: 20}}), ...overrideResponse})


export const getItemsReadItemsMockHandler = (overrideResponse?: ItemsPublic | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ItemsPublic> | ItemsPublic)) => {
  return http.get('*/api/v1/items/', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getItemsReadItemsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getItemsCreateItemMockHandler = (overrideResponse?: ItemPublic | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ItemPublic> | ItemPublic)) => {
  return http.post('*/api/v1/items/', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getItemsCreateItemResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getItemsReadItemMockHandler = (overrideResponse?: ItemPublic | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ItemPublic> | ItemPublic)) => {
  return http.get('*/api/v1/items/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getItemsReadItemResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getItemsUpdateItemMockHandler = (overrideResponse?: ItemPublic | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<ItemPublic> | ItemPublic)) => {
  return http.put('*/api/v1/items/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getItemsUpdateItemResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getItemsDeleteItemMockHandler = (overrideResponse?: Message | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Message> | Message)) => {
  return http.delete('*/api/v1/items/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getItemsDeleteItemResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getItemsMock = () => [
  getItemsReadItemsMockHandler(),
  getItemsCreateItemMockHandler(),
  getItemsReadItemMockHandler(),
  getItemsUpdateItemMockHandler(),
  getItemsDeleteItemMockHandler()
]

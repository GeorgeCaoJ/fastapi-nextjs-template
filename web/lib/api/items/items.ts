/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Full Stack FastAPI Project
 * OpenAPI spec version: 0.1.0
 */
import type {
  HTTPValidationError,
  ItemCreate,
  ItemPublic,
  ItemUpdate,
  ItemsPublic,
  ItemsReadItemsParams,
  Message
} from '.././models';

import { customFetch } from '.././custom-fetch';

/**
 * Retrieve items.
 * @summary Read Items
 */
export type itemsReadItemsResponse200 = {
  data: ItemsPublic
  status: 200
}

export type itemsReadItemsResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type itemsReadItemsResponseComposite = itemsReadItemsResponse200 | itemsReadItemsResponse422;
    
export type itemsReadItemsResponse = itemsReadItemsResponseComposite & {
  headers: Headers;
}

export const getItemsReadItemsUrl = (params?: ItemsReadItemsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/items/?${stringifiedParams}` : `/api/v1/items/`
}

export const itemsReadItems = async (params?: ItemsReadItemsParams, options?: RequestInit): Promise<itemsReadItemsResponse> => {
  
  return customFetch<itemsReadItemsResponse>(getItemsReadItemsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Create new item.
 * @summary Create Item
 */
export type itemsCreateItemResponse200 = {
  data: ItemPublic
  status: 200
}

export type itemsCreateItemResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type itemsCreateItemResponseComposite = itemsCreateItemResponse200 | itemsCreateItemResponse422;
    
export type itemsCreateItemResponse = itemsCreateItemResponseComposite & {
  headers: Headers;
}

export const getItemsCreateItemUrl = () => {


  

  return `/api/v1/items/`
}

export const itemsCreateItem = async (itemCreate: ItemCreate, options?: RequestInit): Promise<itemsCreateItemResponse> => {
  
  return customFetch<itemsCreateItemResponse>(getItemsCreateItemUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      itemCreate,)
  }
);}


/**
 * Get item by ID.
 * @summary Read Item
 */
export type itemsReadItemResponse200 = {
  data: ItemPublic
  status: 200
}

export type itemsReadItemResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type itemsReadItemResponseComposite = itemsReadItemResponse200 | itemsReadItemResponse422;
    
export type itemsReadItemResponse = itemsReadItemResponseComposite & {
  headers: Headers;
}

export const getItemsReadItemUrl = (id: string,) => {


  

  return `/api/v1/items/${id}`
}

export const itemsReadItem = async (id: string, options?: RequestInit): Promise<itemsReadItemResponse> => {
  
  return customFetch<itemsReadItemResponse>(getItemsReadItemUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


/**
 * Update an item.
 * @summary Update Item
 */
export type itemsUpdateItemResponse200 = {
  data: ItemPublic
  status: 200
}

export type itemsUpdateItemResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type itemsUpdateItemResponseComposite = itemsUpdateItemResponse200 | itemsUpdateItemResponse422;
    
export type itemsUpdateItemResponse = itemsUpdateItemResponseComposite & {
  headers: Headers;
}

export const getItemsUpdateItemUrl = (id: string,) => {


  

  return `/api/v1/items/${id}`
}

export const itemsUpdateItem = async (id: string,
    itemUpdate: ItemUpdate, options?: RequestInit): Promise<itemsUpdateItemResponse> => {
  
  return customFetch<itemsUpdateItemResponse>(getItemsUpdateItemUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      itemUpdate,)
  }
);}


/**
 * Delete an item.
 * @summary Delete Item
 */
export type itemsDeleteItemResponse200 = {
  data: Message
  status: 200
}

export type itemsDeleteItemResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type itemsDeleteItemResponseComposite = itemsDeleteItemResponse200 | itemsDeleteItemResponse422;
    
export type itemsDeleteItemResponse = itemsDeleteItemResponseComposite & {
  headers: Headers;
}

export const getItemsDeleteItemUrl = (id: string,) => {


  

  return `/api/v1/items/${id}`
}

export const itemsDeleteItem = async (id: string, options?: RequestInit): Promise<itemsDeleteItemResponse> => {
  
  return customFetch<itemsDeleteItemResponse>(getItemsDeleteItemUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}


